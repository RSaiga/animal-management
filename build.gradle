buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    }
}

plugins {
    id 'org.springframework.boot' version '2.1.1.RELEASE'
    id 'java'
    id 'war'
    id 'com.moowork.node' version '1.2.0'
    id 'groovy'
}
apply plugin: 'io.spring.dependency-management'

war {
    archiveBaseName = "animal-management-web"
    archiveFileName = "${archiveBaseName}.war"
    version = ""
}

group = 'com.lib.training'
//version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// for Doma 2
// JavaクラスとSQLファイルの出力先ディレクトリを同じにする
processResources.destinationDir = compileJava.destinationDir
// コンパイルより前にSQLファイルを出力先ディレクトリにコピーするために依存関係を逆転する
compileJava.dependsOn processResources
compileJava.options.compilerArgs = ['-Adoma.dao.subpackage=impl', '-Adoma.dao.suffix=Impl']

def appVersion = '1.0.'
def appTstamp = java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern('yyMMddHHmm'))
ant.echo(message: 'echo version: ' + appVersion + appTstamp)
ant.echo(message: appVersion + appTstamp, file: new File('src/main/resources/version'))

ext.profile = 'dev'
ext.logfilename = 'animal-management'

if (hasProperty('env')) {
    if ("${env}".contains('prod')) {
        ext.profile = 'prod'
    }
}

processResources {
    filesMatching('**/application.yml') {
        expand(project.properties)
    }
    filesMatching('**/logback.xml') {
        expand(project.properties)
    }
}

node {
    version = '8.11.1' //使用するnodeのバージョン
    npmVersion='5.6.0'
    download = true //各自の環境にダウンロードする
//	workDir = file('src/main/resources/static') // nodejsインストールディレクトリを指定
    nodeModulesDir = file('src/main/resources/static') // package.jsonがあるディレクトリの位置を指定
}
task npmBuild(type: NpmTask) {
    args = ['run', 'build']
}
processResources.dependsOn npmBuild

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.seasar.doma.boot:doma-spring-boot-starter:1.2.1'
    implementation("org.seasar.doma:doma:2.24.0")
    annotationProcessor("org.seasar.doma:doma:2.24.0")
//    implementation 'org.postgresql:postgresql:42.1.4'
    implementation 'mysql:mysql-connector-java'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.spockframework:spock-core:1.2-groovy-2.4'
    testImplementation 'org.spockframework:spock-spring:1.2-groovy-2.4'
}
